package hello;


import org.w3c.dom.ls.LSOutput;

public class Sound {
    private static final double VELOCITY_OF_SOUND = 330; // –º/—Å
    private static final double METER_TO_FOOT = 3.28;


    /**
     * –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2.1
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –º–µ—Å—Ç–∞ –≤—Å–ø—ã—à–∫–∏ –º–æ–ª–Ω–∏–∏, –∑–≤—É–∫ –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ
     * –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
     */
    public static double metersToSound(double time_in_seconds) {
        return (VELOCITY_OF_SOUND * time_in_seconds);
    }

    public static double footsToSound(double time_in_seconds) {
        return (VELOCITY_OF_SOUND * time_in_seconds * METER_TO_FOOT);
    }

    /**
     * –í–∏–¥–æ–∏–∑–º–µ–Ω–∏—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é –≤—ã—à–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏
     * –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø—Ä–∏—Ö–æ–¥–∞ —ç—Ö–∞.
     * */
    public static double metersToEcho(double time_in_seconds) {
        return (metersToSound(time_in_seconds) / 2);
    }

    public static double footsToEcho(double time_in_seconds) {
        return (footsToSound(time_in_seconds) / 2);
    }

    public static void testIncremment() {
        /*
        * –í—Å–µ –ø—Ä–µ–¥–µ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ, –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±—ä—è–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ü–∏–∫–ª–∞ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 0,
        *  –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—Ö–æ–¥–µ –≤ —Ü–∏–∫–ª –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ —Ä–∞–≤–Ω–æ –Ω—É–ª—é, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω–∞ –ø–æ–ª—É—á–∞–µ—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        * –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–æ—Å—Ç—Ñ–∏–∫—Å–Ω–æ–π —Ñ–æ—Ä–º–µ –±—É–¥–µ—Ç —Ç–µ—Ä—è—Ç—å—Å—è –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞ —Ü–∏–∫–ª–∞!
        * */
        int s = 0;
        for (int i = 0; i < 10; ++i) {
            s = s++ + s;
            System.out.println(i + " : " + s);
        }

        s = 0;
        System.out.println();
        for (int i = 0; i < 10; ++i) {
            s = s + s++;
            System.out.println(i + " : " + s);
        }

        System.out.println();
        s = 0;
        for (int i = 0; i < 10; ++i) {
            s = s + ++s;
            System.out.println(i + " : " + s);
        }
    }

    public static void unicodeTest() {
        char ch = 6505;
        System.out.println("\u6505");
        System.out.println(ch);
    }

    public static void tetsEmoji() {
        char ch = 0XF631;
        System.out.println(ch);
        System.out.println("\uF631");
        System.out.println("üò∞");
        // ch = 'üò∞';
        // char mas_ch = "üò∞";
        String str = "üò∞";
        System.out.println(str.length());
        System.out.println(str.charAt(0));
        System.out.println(str.charAt(1));
        ch = '?';
        for (int i = 0; i < 65000; ++i) {
            if (ch == i) {
                System.out.println("? = " + i);
                break;
            }
        }
        System.out.println("\u6363");
    }

    public static void testCast() {

        // —è–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
        byte a, b, c;
        a = 100;
        b = 20;
        // c = a / b; // –æ—à–∏–±–∫–∞, —Ç–∞–∫ –∫–∞–∫ Java —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–∏–ø–æ–º int –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        c = (byte) (a / b);

        short i, j, k;
        i = j = 20;
        //k = i / j; // —Ç–æ –∂–µ —Å–∞–º–æ–µ

        int integer = 10;
        char ch = (char) integer;
        ch = 11;

        integer = 257;
        // 100 = **1100100
        b = (byte) integer; // –¥–∏–∞–ø–æ–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π -128 - 127 –¥–ª—è —Ç–∏–ø–∞ byte
        // 257 = 100000001
        // 256 = 100000000
        // 127 = **1111111
        System.out.println("B = " + b + "   INT = " + integer);


    }
}
